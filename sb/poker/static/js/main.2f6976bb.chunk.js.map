{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["blankCard","cardsPath","memory","cards","dialer","table","user","App","props","state","commandString","test","ViewUlList","listItems","map","item","key","parseInt","Date","getTime","getMilliseconds","JSON","stringify","getState","getRecoveryState","recoveryState","assistant","createAssistant","on","console","log","push","setState","command","smart_app_data","Object","assign","id","className","this","c1","alt","src","c2","c3","c4","c5","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f6976bb.chunk.js","sourcesContent":["// jshint esversion:6\n\nimport React from 'react';\nimport { createAssistant, createSmartappDebugger } from '@sberdevices/assistant-client';\nimport './App.css';\n\n//const SBER_TOKEN = process.env.SBER_TOKEN;\nconst SBER_TOKEN = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MDQ0MTI1MzgsImV4cCI6MTYwNDQ5ODkzOCwidHlwZSI6IkJlYXJlciIsImp0aSI6ImJkNzFhYjBiLTc5OTQtNDUyNC1iNWZjLWU1NTcyMjIxMDgxZCIsInN1YiI6IjBiZjZmNTA3MjM5YzI0ZjkwMDk5MTc1YjhlOGU4YWI1NGUxYzE2NjFlMzgzMzRjYTQxNjIxMDVmYzEyNGRmMjA3ZDJmZDBjZDVlZjI3YWJmIiwiYXVkIjoiVlBTIn0.blIPz_x1jWcarT5ruW9TYzxSwKwPZTXAEGAtRjY3wmU6vwub85bHWJR44wtWfeLSvOu9auiuMe0O0jZFlpwa4b_KnWe0b3UZeAHqVvO8fdmCrsFF2eMy3_KISGMqkmwxOp9339_JyghhvT6YxaFmVjvTyqBaYZEgsXESYjH0klWlhkomHlfmuKUEuu24QQAaVjpDwN0lf-MiSTawHO_z9nicqTeWeM8BiBFFAFLsUSUc9SzwYD76HFa_aTEXRiJePsiPyVL0UbOcPo76aiNX99pKINYTIIBBOipxoL-vBq9JCKoEp2oA_-14gEMnhrvBIzBmLiubTIIZstAzcQgge6quIW-4noiACL4nRpO_B0rSBGS5rxFaGJPDsQYKSoCSZ8mNE5stMo4DwvWiUh6lkVHizGLZ-551JjjO1F2qbrsvI_ojR-dpOZgbuuX3U554b4KOqM8eSb4HHehVVSR4R94EZuYU-6MzkM5fbXRTRnjERw6Rr_HdozEDuJXppD_xpD9RjDkfjhJ6YzjQZCP_G1i2V1UUKUPhfEJjtuu3S0vI7QH8mUdMDHJCNKCl55SNWYZcASg3cPwkZyl77TImF3fEIZ9g9r6cm1SRnEEhlFKP6aiULSPvB92a6_kpnd7giH5i1e0NB59rFrjM5zA13T8zPfCaklZn2OdnBxdtd00';\nconst cardsPath = './cards/';\nconst blankCard = cardsPath + 'blank.png';\nvar memory = [];\nvar cards = {\n    dialer:{},\n    table:{},\n    user:{},\n};\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n\tcommandString: \"HEY!\",\n\ttest: \"\",\n\tcards: cards\n    };\n  }\n\n\n  componentDidMount() {\nfunction Utime(){\n return parseInt(new Date().getTime()/1000) + '.' + new Date().getMilliseconds();\n}\nfunction ViewUlList(props) {\n  const list = props;\n  const listItems = list.map((item) =>\n    <li key={Utime()}>{JSON.stringify(item)}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n    const state = {};\n    const recoveryState = {};\n\n    const initialize = (getState, getRecoveryState) => {\n      if (process.env.NODE_ENV === 'development') {\n          //return createSmartappDebugger({ token: SBER_TOKEN, initPhrase: 'Привет', getState, getRecoveryState });\n          return createSmartappDebugger({ token: SBER_TOKEN, initPhrase: 'Запусти техасский холдем покер', getState, getRecoveryState });\n      }\n      return createAssistant({ getState, getRecoveryState });\n    };\n\n    const assistant = initialize(() => state, () => recoveryState);\n\n    assistant.on('start', () => {\n      console.log(`start`);\n     //this.setState({ commandString: this.state.commandString.concat(' /// ', 'READY') });\n      memory.push({state: \"ready\"});\n      this.setState({ commandString: ViewUlList(memory), test: \"\" });\n    });\n\n    assistant.on('data', (command) => {\n      console.log(`command: ${JSON.stringify(command)}`);\n      memory.push(command);\n      console.log('memory',memory);\n      //this.setState({ commandString: this.state.commandString.concat(' /// ', JSON.stringify(command)) });\n     // const card = <div><img src=\"/cards/10c.png\" alt=\"card1\"/></div>;\n      //const card = <div style={{ height: '10%',backgroundImage: 'url(/10c.png)' }}>;\n      //const card = <h1>Hello, world</h1>;\n      //this.setState({ commandString: ViewUlList(memory) + card });\n\n      //this.setState({ commandString: card });\n      if (typeof command.smart_app_data != \"undefined\"){\n        cards = Object.assign({}, this.state.cards);\n\tif (typeof command.smart_app_data.dialer != \"undefined\"){\n\t    cards.dialer = command.smart_app_data.dialer;\n\t    console.log('cards.dialer',cards.dialer);\n\t}\n\tif (typeof command.smart_app_data.table != \"undefined\"){\n\t    cards.table = command.smart_app_data.table;\n\t    console.log('cards.table',cards.table);\n\t}\n\tif (typeof command.smart_app_data.table != \"undefined\"){\n\t    cards.table = command.smart_app_data.table;\n\t    console.log('cards.table',cards.table);\n\t}\n\tif (typeof command.smart_app_data.user != \"undefined\"){\n\t    cards.user = command.smart_app_data.user;\n\t}\n\tthis.setState({ cards: cards });\n\tconsole.log('this: cards',this.state.cards);\n\tconsole.log('cards',cards);\n      }\n/*\n      if (command.navigation) {\n        switch(command.navigation.command) {\n          case 'UP':\n            // window.scrollTo(0, 0);\n            break;\n          case 'DOWN':\n            // window.scrollTo(0, 1000);\n            break;\n          default:\n        }\n      }\n*/\n    });\n  }\n\n  render() {\n   return <div id=\"wrapper\">\n\t<div id=\"cards\">\n\t    <div className=\"dialer_cards\">\n\t\t<div id=\"dialer_card_1\" className={(typeof this.state.cards.dialer.c1 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.dialer.c1 != \"undefined\" ? './cards/' + this.state.cards.dialer.c1 + '.png' : blankCard)} />\n\t\t</div>\n\t\t<div id=\"dialer_card_2\" className={(typeof this.state.cards.dialer.c2 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.dialer.c2 != \"undefined\" ? './cards/' + this.state.cards.dialer.c2 + '.png' : blankCard)} />\n\t\t</div>\n\t    </div>\n\t    <div className=\"table_cards\">\n\t\t<div id=\"table_card_1\" className={(typeof this.state.cards.table.c1 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.table.c1 != \"undefined\" ? './cards/' + this.state.cards.table.c1 + '.png' : blankCard)} />\n\t\t</div>\n\t\t<div id=\"table_card_2\" className={(typeof this.state.cards.table.c2 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.table.c2 != \"undefined\" ? './cards/' + this.state.cards.table.c2 + '.png' : blankCard)} />\n\t\t</div>\n\t\t<div id=\"table_card_3\" className={(typeof this.state.cards.table.c3 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.table.c3 != \"undefined\" ? './cards/' + this.state.cards.table.c3 + '.png' : blankCard)} />\n\t\t</div>\n\t\t<div id=\"table_card_4\" className={(typeof this.state.cards.table.c4 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.table.c4 != \"undefined\" ? './cards/' + this.state.cards.table.c4 + '.png' : blankCard)} />\n\t\t</div>\n\t\t<div id=\"table_card_5\" className={(typeof this.state.cards.table.c5 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.table.c5 != \"undefined\" ? './cards/' + this.state.cards.table.c5 + '.png' : blankCard)} />\n\t\t</div>\n\t    </div>\n\t    <div className=\"user_cards\">\n\t\t<div id=\"user_card_1\" className={(typeof this.state.cards.user.c1 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.user.c1 != \"undefined\" ? './cards/' + this.state.cards.user.c1 + '.png' : blankCard)} />\n\t\t</div>\n\t\t<div id=\"user_card_2\" className={(typeof this.state.cards.user.c2 != \"undefined\" ? 'card' : 'card notvis')}>\n\t\t    <img alt=\"card\" src={(typeof this.state.cards.user.c2 != \"undefined\" ? './cards/' + this.state.cards.user.c2 + '.png' : blankCard)} />\n\t\t</div>\n\t    </div>\n\t</div>\n\t<div id=\"messages\"></div>\n    </div>;\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}